
#-------------------------------------------------------
# 3. firewall
#-------------------------------------------------------
# Configuración del firewall
- name: Habilitando el firewall
  ufw:
    state: enabled

# Permitir tráfico en los puertos necesarios del worker
- name: Permitir tráfico en los puertos necesarios del worker
  ufw:
    rule: allow
    port: "{{ item }}"
    proto: tcp
  loop:
    - 22    # SSH
    - 10250 # Kubelet API
    - 10255 # Read-only Kubelet API (opcional)
    - 5473  # Calico networking

# Abrir el rango de puertos 30000-32767 en los workers
# - name: Abrir rango de puertos NodePort en los workers
#   shell: |
#     for port in $(seq 30000 32767); do
#       ufw allow $port/tcp
#     done
#   when: inventory_hostname in groups['workers']

- name: Cerrar puertos de NodePort en el firewall
  ufw:
    rule: allow
    port: "{{ item }}"
    proto: tcp
  loop:
    - "30000:30030" 


# Recargar Firewall
- name: Recargamos el firewall
  command: ufw reload

#----------------------------------------------
# 4. Reglas forward y Modulos del kernel
#----------------------------------------------
# Preparando el sistema para instalar Docker y Containerd
- name: Añadiendo modulos del kernel para Containerd
  copy:
    dest: /etc/modules-load.d/containerd.conf
    content: |
      overlay
      br_netfilter

- name: Load kernel modules for Containerd
  command: modprobe overlay && modprobe br_netfilter
  become: true

- name: Añadiendo modulos del kernel para Kubernetes
  copy:
    dest: /etc/sysctl.d/kubernetes.conf
    content: |
      net.bridge.bridge-nf-call-ip6tables = 1
      net.bridge.bridge-nf-call-iptables = 1
      net.ipv4.ip_forward = 1

- name: Aplicar cambios de configuración
  command: sysctl --system

#-------------------------------------------------------
# 5. Instalación de Paquetes y Configuración
#-------------------------------------------------------
# 1. containerd
- name: Instalando containerd
  apt:
    name: containerd
    state: present
    update_cache: yes
  become: true

    # 1. configuración
  # Crear el directorio /etc/containerd si no existe
- name: Crear directorio /etc/containerd
  file:
    path: /etc/containerd
    state: directory
    mode: '0777'

      # Crear la configuración por defecto de containerd
- name: Crear la configuración por defecto de containerd
  shell: containerd config default > /etc/containerd/config.toml
  become: true
  args:
      creates: /etc/containerd/config.toml

    # 2. plugin CRI
- name: Configuring Containerd (Setting SystemdCgroup Variable to True)
  replace:
    path: /etc/containerd/config.toml
    regexp: 'SystemdCgroup = false'
    replace: 'SystemdCgroup = true'
  become: true

    # 3. Reiniciar y Habilitar containerd para que se inicie automáticamente al arrancar el sistema
- name: Reiniciar containerd
  systemd:
    name: containerd
    state: restarted

- name: Habilitar containerd
  systemd:
    name: containerd
    enabled: yes

# 2. kubernetes
  # Instalamos
- name: Instalando kubeadm, kubelet, kubectl
  apt:
    name:
      - kubelet
      - kubeadm
      - kubectl
    state: present
    update_cache: yes

- name: Manterner versiones de kubeadm, kubelet, kubectl
  command: apt-mark hold kubelet kubeadm kubectl
  become: true

  # Habilitar kubelet y verificar la instalación
- name: Habilitat kubelet
  command: systemctl enable --now kubelet
  become: true
#-------------------------------------------------------
- name: Cargar variables desde el archivo temporal
  include_vars:
    file: /tmp/kubeadm_join_vars.yml
    name: kubeadm_vars


- name: Mostrar las variables cargadas
  debug:
    msg: >
      Token: {{ kubeadm_vars.kubeadm_token }}
      Hash: {{ kubeadm_vars.kubeadm_ca_hash }}


#-------------------------------------------------------
# 1. Unirse al clúster usando kubeadm join
#-------------------------------------------------------
- name: Unirse al clúster de Kubernetes
  command: >
    kubeadm join {{ ip_master }}:6443 --token {{ kubeadm_vars.kubeadm_token }}
    --discovery-token-ca-cert-hash {{ kubeadm_vars.kubeadm_ca_hash }}
  when: inventory_hostname in groups['workers']
  become: true


# Verificar el estado de los pods.
- name: Verificar el estado de los pods en el namespace kube-system
  command: kubectl get pods -n kube-system
  when: inventory_hostname == "master1
