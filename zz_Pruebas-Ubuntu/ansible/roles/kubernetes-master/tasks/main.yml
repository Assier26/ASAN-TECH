#-------------------------------------------------------
# 1. Iniciar el cluster
#-------------------------------------------------------
# - name: Pull kubeadm container images
  # command: kubeadm config images pull --kubernetes-version v1.30.10
  # become: true

- name: Inicializar el clúster de Kubernetes
  command: kubeadm init --pod-network-cidr=10.244.0.0/16
  args:
    creates: /etc/kubernetes/admin.conf

#-------------------------------------------------------
# 2. configurar kubectl para el usuario actual
#-------------------------------------------------------
- name: Configurar kubectl para el usuario actual
  block:
    - name: Crear directorio .kube
      file:
        path: "{{ ansible_env.HOME }}/.kube"
        state: directory
        mode: '0755'

    - name: Copiar el archivo de configuración de Kubernetes
      copy:
        src: /etc/kubernetes/admin.conf
        dest: "{{ ansible_env.HOME }}/.kube/config"
        remote_src: yes
        mode: '0644'

    - name: Cambiar el propietario del archivo config
      file:
        path: "{{ ansible_env.HOME }}/.kube/config"
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_gid | default(ansible_user_id) }}"
        mode: '0644'
      become: yes  # Esto es importante para cambiar el dueño como root
  when: inventory_hostname == "master1"

#-------------------------------------------------------
# 3. Crear el comando de union del worker	
#-------------------------------------------------------
- name: Obtener el comando de unión del worker
  command: kubeadm token create --print-join-command
  register: join_command
  when: inventory_hostname == "master1"

- name: Mostrar el comando de unión
  debug:
    msg: "Comando para unir el worker: {{ join_command.stdout }}"
  when: inventory_hostname == "master1"

- name: Guardar el comando de unión en un archivo temporal
  copy:
    content: "{{ join_command.stdout }}"
    dest: /tmp/join_command.sh
    mode: '0755'

- name: Copiar el archivo al nodo de control
  fetch:
    src: /tmp/join_command.sh
    dest: /tmp/join_command.sh
    flat: yes


#-------------------------------------------------------
# 4. desplegar plugin de red.
#-------------------------------------------------------
- name: Desplegar un plugin de red (Calico)
  command: kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml
  when: inventory_hostname == "master1"

#-------------------------------------------------------
# 10. Ingress Controller para exponer los servicios.
#-------------------------------------------------------
# FUTURA IMPLEMENTACIÓN
# - name: Desplegar un controlador de Ingress (Nginx) para exponer los servicios
#   command: kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/baremetal/deploy.yaml
#   when: inventory_hostname == "master1"
#-------------------------------------------------------