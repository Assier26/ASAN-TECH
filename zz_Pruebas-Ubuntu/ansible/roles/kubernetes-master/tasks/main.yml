#-------------------------------------------------------
# 1. Iniciar el cluster
#-------------------------------------------------------
# - name: Pull kubeadm container images
  # command: kubeadm config images pull --kubernetes-version v1.30.10
  # become: true

- name: Inicializar el clúster de Kubernetes
  command: kubeadm init --pod-network-cidr={{ pod_network }}
  args:
    creates: /etc/kubernetes/admin.conf

#-------------------------------------------------------
# 2. configurar kubectl para el usuario actual
#-------------------------------------------------------
- name: Configurar kubectl para el usuario actual
  block:
    - name: Crear directorio .kube
      file:
        path: "{{ ansible_env.HOME }}/.kube"
        state: directory
        mode: '0755'

    - name: Copiar el archivo de configuración de Kubernetes
      copy:
        src: /etc/kubernetes/admin.conf
        dest: "{{ ansible_env.HOME }}/.kube/config"
        remote_src: yes
        mode: '0644'

    - name: Cambiar el propietario del archivo config
      file:
        path: "{{ ansible_env.HOME }}/.kube/config"
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_gid | default(ansible_user_id) }}"
        mode: '0644'
      become: yes  # Esto es importante para cambiar el dueño como root
  when: inventory_hostname == "master1"

#-------------------------------------------------------
# 3. Crear el comando de union del worker	
#-------------------------------------------------------
- name: Obtener el comando de unión del worker
  command: kubeadm token create --print-join-command
  register: join_command
  when: inventory_hostname == "master1"

- name: Extraer el token del comando de unión
  set_fact:
    kubeadm_token: "{{ join_command.stdout | regex_search('--token\\s+(\\S+)', '\\1') }}"
  when: inventory_hostname == "master1"

- name: Extraer el hash del certificado CA del comando de unión
  set_fact:
    kubeadm_ca_hash: "{{ join_command.stdout | regex_search('--discovery-token-ca-cert-hash\\s+(\\S+)', '\\1') }}"
  when: inventory_hostname == "master1"

- name: Mostrar el token y el hash generados
  debug:
    msg: >
      Token generado: {{ kubeadm_token }}
      Hash del certificado CA: {{ kubeadm_ca_hash }}
  when: inventory_hostname == "master1"

- name: Guardar el token y el hash en un archivo temporal
  copy:
    content: |
      kubeadm_token: "{{ kubeadm_token }}"
      kubeadm_ca_hash: "{{ kubeadm_ca_hash }}"
    dest: /tmp/kubeadm_join_vars.txt
  when: inventory_hostname == "master1"

- name: Copiar el archivo al nodo de control
  fetch:
    src: /tmp/kubeadm_join_vars.txt
    dest: /tmp/kubeadm_join_vars.txt
    flat: yes
  when: inventory_hostname == "master1"

#-------------------------------------------------------
# 4. desplegar plugin de red.
#-------------------------------------------------------
- name: Desplegar un plugin de red (Calico)
  command: kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml
  when: inventory_hostname == "master1"

