- name: Install Docker
  apt:
    name: docker.io
    state: present
    update_cache: yes

- name: Install containerd
  apt:
    name: containerd
    state: present
    update_cache: yes
  become: true

- name: Remove Keyrings Directory (if it exists)
  file:
    path: /etc/apt/keyrings
    state: absent

- name: Remove Existing Kubernetes Directory (if it exists)
  file:
    path: /etc/apt/sources.list.d/pkgs_k8s_io_core_stable_v1_30_deb.list
    state: absent

- name: Disable swap
  command: swapoff -a

- name: Ensure swap is disabled on boot
  lineinfile:
    path: /etc/fstab
    regexp: '^/swap.img'
    line: '#/swap.img none swap sw 0 0'
    state: present

- name: Add kernel modules for Containerd
  copy:
    dest: /etc/modules-load.d/containerd.conf
    content: |
      overlay
      br_netfilter

- name: Load kernel modules for Containerd
  command: modprobe overlay && modprobe br_netfilter
  become: true

- name: Add kernel parameters for Kubernetes
  copy:
    dest: /etc/sysctl.d/kubernetes.conf
    content: |
      net.bridge.bridge-nf-call-ip6tables = 1
      net.bridge.bridge-nf-call-iptables = 1
      net.ipv4.ip_forward = 1

- name: Load kernel parameter changes
  command: sysctl --system

- name: Ensure /etc/containerd directory exists
  file:
    path: /etc/containerd
    state: directory
    mode: '0755'

- name: Configuring Containerd (building the configuration file)
  command: sh -c "containerd config default > /etc/containerd/config.toml"
  become: true

- name: Configuring Containerd (Setting SystemdCgroup Variable to True)
  replace:
    path: /etc/containerd/config.toml
    regexp: 'SystemdCgroup = false'
    replace: 'SystemdCgroup = true'
  become: true

- name: Reload systemd configuration
  command: systemctl daemon-reload

- name: Restart containerd service
  service:
    name: containerd
    state: restarted

- name: Allow required ports through firewall
  ufw:
    rule: allow
    port: "{{ item }}"
    proto: tcp
  loop:
    - 6443  # Kubernetes API server
    - 2379  # etcd client requests
    - 2380  # etcd peer communication
    - 22    # SSH
    - 10250 # Kubelet API
    - 10255 # Read-only Kubelet API
    - 5473  # Calico networking

- name: Enable the firewall
  ufw:
    state: enabled

- name: Reload the firewall
  command: ufw reload

- name: Prepare keyrings directory and update permissions
  file:
    path: /etc/apt/keyrings
    state: directory
    mode: '0755'

- name: Download Kubernetes GPG key securely
  shell: curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
  become: true

- name: Add Kubernetes repository
  apt_repository:
    repo: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /"
    state: present

- name: Install kubeadm, kubelet, kubectl
  apt:
    name:
      - kubelet
      - kubeadm
      - kubectl
    state: present
    update_cache: yes

- name: Hold kubelet, kubeadm, kubectl packages
  command: apt-mark hold kubelet kubeadm kubectl
  become: true

- name: Replace /etc/default/kubelet contents
  copy:
    dest: /etc/default/kubelet
    content: 'KUBELET_EXTRA_ARGS="--cgroup-driver=systemd"'

- name: Reload systemd configuration
  command: systemctl daemon-reload

- name: Restart kubelet service
  service:
    name: kubelet
    state: restarted




- name: Read Join Command from Master
  slurp:
    path: /tmp/join-command
  register: join_command
  delegate_to: master1




- name: Join Kubernetes cluster
  command: "{{ join_command.content | b64decode }}"
  become: true


- name: Verify cluster status
  shell: |
    kubectl get nodes
  register: nodes
  until: "'Ready' in nodes.stdout"
  retries: 10
  delay: 10
  ignore_errors: yes