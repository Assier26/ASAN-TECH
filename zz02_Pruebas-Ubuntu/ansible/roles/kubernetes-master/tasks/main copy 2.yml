- name: Install Docker
  apt:
    name: docker.io
    state: present
    update_cache: yes

- name: Install containerd
  apt:
    name: containerd
    state: present
    update_cache: yes
  become: true

- name: Remove Keyrings Directory (if it exists)
  file:
    path: /etc/apt/keyrings
    state: absent

- name: Remove Existing Kubernetes Directory (if it exists)
  file:
    path: /etc/apt/sources.list.d/pkgs_k8s_io_core_stable_v1_30_deb.list
    state: absent

- name: Disable swap
  command: swapoff -a

- name: Ensure swap is disabled on boot
  lineinfile:
    path: /etc/fstab
    regexp: '^/swap.img'
    line: '#/swap.img none swap sw 0 0'
    state: present

- name: Add kernel modules for Containerd
  copy:
    dest: /etc/modules-load.d/containerd.conf
    content: |
      overlay
      br_netfilter

- name: Load kernel modules for Containerd
  command: modprobe overlay && modprobe br_netfilter
  become: true

- name: Add kernel parameters for Kubernetes
  copy:
    dest: /etc/sysctl.d/kubernetes.conf
    content: |
      net.bridge.bridge-nf-call-ip6tables = 1
      net.bridge.bridge-nf-call-iptables = 1
      net.ipv4.ip_forward = 1

- name: Load kernel parameter changes
  command: sysctl --system

- name: Ensure /etc/containerd directory exists
  file:
    path: /etc/containerd
    state: directory
    mode: '0755'

- name: Configuring Containerd (building the configuration file)
  command: sh -c "containerd config default > /etc/containerd/config.toml"
  become: true

- name: Configuring Containerd (Setting SystemdCgroup Variable to True)
  replace:
    path: /etc/containerd/config.toml
    regexp: 'SystemdCgroup = false'
    replace: 'SystemdCgroup = true'
  become: true

- name: Reload systemd configuration
  command: systemctl daemon-reload

- name: Restart containerd service
  service:
    name: containerd
    state: restarted

- name: Allow required ports through firewall
  ufw:
    rule: allow
    port: "{{ item }}"
    proto: tcp
  loop:
    - 6443  # Kubernetes API server
    - 2379  # etcd client requests
    - 2380  # etcd peer communication
    - 22    # SSH
    - 8080  # Optional: Kubernetes API insecure port
    - 10250 # Kubelet API
    - 10251 # Scheduler
    - 10252 # Controller Manager
    - 10255 # Read-only Kubelet API
    - 5473  # Calico networking

- name: Enable the firewall
  ufw:
    state: enabled

- name: Reload the firewall
  command: ufw reload

- name: Prepare keyrings directory and update permissions
  file:
    path: /etc/apt/keyrings
    state: directory
    mode: '0755'

- name: Download Kubernetes GPG key securely
  shell: curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.30/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
  become: true

- name: Add Kubernetes repository
  apt_repository:
    repo: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /"
    state: present

- name: Install kubeadm, kubelet, kubectl
  apt:
    name:
      - kubelet
      - kubeadm
      - kubectl
    state: present
    update_cache: yes

- name: Hold kubelet, kubeadm, kubectl packages
  command: apt-mark hold kubelet kubeadm kubectl
  become: true

- name: Replace /etc/default/kubelet contents
  copy:
    dest: /etc/default/kubelet
    content: 'KUBELET_EXTRA_ARGS="--cgroup-driver=systemd"'

- name: Reload systemd configuration
  command: systemctl daemon-reload

- name: Restart kubelet service
  service:
    name: kubelet
    state: restarted

- name: Update System-Wide Profile for Kubernetes
  copy:
    dest: /etc/profile.d/kubernetes.sh
    content: |
      export KUBECONFIG=/etc/kubernetes/admin.conf
      export ANSIBLE_USER="asan"

- name: Reboot the system
  reboot:
    msg: "Reboot initiated by Ansible for Kubernetes setup"
    reboot_timeout: 150

- name: Replace Docker daemon.json configuration
  copy:
    dest: /etc/docker/daemon.json
    content: |
      {
        "exec-opts": ["native.cgroupdriver=systemd"],
        "log-driver": "json-file",
        "log-opts": {
          "max-size": "100m"
        },
        "storage-driver": "overlay2"
      }

- name: Reload systemd configuration
  command: systemctl daemon-reload

- name: Restart Docker service
  service:
    name: docker
    state: restarted

- name: Update Kubeadm Environment Variable
  blockinfile:
    path: /usr/lib/systemd/system/kubelet.service.d/10-kubeadm.conf
    block: |
      [Service]
      Environment="KUBELET_EXTRA_ARGS=--fail-swap-on=false"
    marker: "# {mark} ANSIBLE MANAGED BLOCK"

- name: Fix kubelet systemd configuration
  copy:
    dest: /usr/lib/systemd/system/kubelet.service.d/10-kubeadm.conf
    content: |
      [Service]
      Environment="KUBELET_EXTRA_ARGS=--fail-swap-on=false"
  notify:
    - Reload systemd
    - Restart kubelet

- name: Reload systemd configuration
  command: systemctl daemon-reload

- name: Restart kubelet service
  service:
    name: kubelet
    state: restarted

- name: Pull kubeadm container images
  command: kubeadm config images pull --kubernetes-version v1.30.10
  become: true

- name: Verify CPU count
  fail:
    msg: "Kubernetes requires at least 2 CPUs. Current CPUs: {{ ansible_processor_vcpus }}"
  when: ansible_processor_vcpus < 2

- name: Stop kubelet service to free port 10250
  service:
    name: kubelet
    state: stopped
  ignore_errors: yes












- name: Initialize Kubernetes control plane
  command: kubeadm init --pod-network-cidr=10.244.0.0/16 --apiserver-advertise-address=192.168.1.12
  args:
    creates: /etc/kubernetes/admin.conf
  become: true
  register: kubeadm_init_output




- name: Fix kube-apiserver.yaml to use the correct IP
  replace:
    path: /etc/kubernetes/manifests/kube-apiserver.yaml
    regexp: 'host: 10.0.2.15'
    replace: 'host: 192.168.1.12'
  become: true
  notify: Restart kubelet









- name: Enable kubelet service
  service:
    name: kubelet
    enabled: yes
    state: started

- name: Set permissions for Kubernetes Admin
  file:
    path: /etc/kubernetes/admin.conf
    state: file
    mode: '0755'




- name: Store Kubernetes initialization output to file
  copy:
    content: "{{ kubeadm_init_output.stdout }}"
    dest: /tmp/kubeadm_output
  delegate_to: localhost




- name: Wait for API server to be available
  uri:
    url: https://192.168.1.12:6443/healthz
    validate_certs: no
    status_code: 200
  register: api_server_status
  until: api_server_status.status == 200
  retries: 5
  delay: 10
  ignore_errors: yes
  

- name: Fail if API server is not available after retries
  fail:
    msg: "El API server no está disponible después de 5 minutos. Verifica el estado del clúster."
  when: api_server_status.status != 200





- name: Generate the Join Command
  shell: kubeadm token create --print-join-command > /tmp/join-command
  become: true





- name: Wait for /tmp/join-command to be created
  stat:
    path: /tmp/join-command
  register: join_command_stat
  until: join_command_stat.stat.exists
  retries: 5  # Número máximo de intentos
  delay: 10    # Tiempo de espera entre intentos (en segundos)
  ignore_errors: yes  # Ignorar errores para permitir reintentos

- name: Fail if /tmp/join-command is not created after retries
  fail:
    msg: "El archivo /tmp/join-command no se ha creado después de 5 minutos. Verifica el estado del clúster."
  when: not join_command_stat.stat.exists


- name: Set permissions for the Join Executable
  file:
    path: /tmp/join-command
    state: file
    mode: '0755'
  delegate_to: localhost