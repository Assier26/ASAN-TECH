#
# Archivo de configuración de Kubernetes-master
#
# Requisitos previos: 2 cpu's
- name: Verify CPU count
  fail:
    msg: "Kubernetes requires at least 2 CPUs. Current CPUs: {{ ansible_processor_vcpus }}"
  when: ansible_processor_vcpus < 2


  

- name: Prepare keyrings directory and update permissions
  file:
    path: /etc/apt/keyrings
    state: directory
    mode: '0777'

  # Eliminar Repositorio anteriores.
- name: Remove Existing Kubernetes Directory (if it exists)
  file:
    path: /etc/apt/sources.list.d/pkgs_k8s_io_core_stable_v1_30_deb.list
    state: absent
- name: Remove Keyrings Directory (if it exists)
  file:
    path: /etc/apt/keyrings
    state: absent



#--------------------------------
# Preparando el sistema para instalar Docker y Containerd
- name: Añadiendo modulos del kernel para Containerd
  copy:
    dest: /etc/modules-load.d/containerd.conf
    content: |
      overlay
      br_netfilter

- name: Load kernel modules for Containerd
  command: modprobe overlay && modprobe br_netfilter
  become: true

- name: Añadiendo modulos del kernel para Kubernetes
  copy:
    dest: /etc/sysctl.d/kubernetes.conf
    content: |
      net.bridge.bridge-nf-call-ip6tables = 1
      net.bridge.bridge-nf-call-iptables = 1
      net.ipv4.ip_forward = 1

- name: Aplicar cambios de configuración
  command: sysctl --system

#---------------------
# ----  Instalación Docker y Containerd  ----
# Clave GPG de Docker

# ---- Instalación Docker y Containerd ----



# Clave GPG de Docker
- name: Descargar Clave GPG de Docker
  shell: curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo tee /usr/share/keyrings/docker-archive-keyring.gpg > /dev/null
  become: true

# Repositorio de Docker
# Agregar Repositorio de Docker
- name: Agregar Repositorio de Docker
  shell: echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
  become: true

# Actualizar Repositorios
- name: Actualizar los Repositorios
  apt:
    update_cache: yes
    cache_valid_time: 3600


# Instalamos
- name: Instalando Docker
  apt:
    name: docker.io
    state: present
    update_cache: yes
  become: true

- name: Instalando containerd
  apt:
    name: containerd.io
    state: present
    update_cache: yes
  become: true

#--------------------------------
# Configuración de containerd
- name: Ensure /etc/containerd directory exists
  file:
    path: /etc/containerd
    state: directory
    mode: '0755'

- name: Configurar containerd
  shell: |
    mkdir -p /etc/containerd
    containerd config default | tee /etc/containerd/config.toml

- name: Configuring Containerd (Setting SystemdCgroup Variable to True)
  replace:
    path: /etc/containerd/config.toml
    regexp: 'SystemdCgroup = false'
    replace: 'SystemdCgroup = true'
  become: true

- name: Reload systemd configuration
  command: systemctl daemon-reload

- name: Reiniciar y habilitar containerd
  systemd:
    name: containerd
    enabled: yes
    state: restarted
#-------------------------------------------------------
# Configuración del firewall
- name: Enable the firewall
  ufw:
    state: enabled

- name: Allow required ports through firewall
  ufw:
    rule: allow
    port: "{{ item }}"
    proto: tcp
  loop:
    - 6443  # Kubernetes API server
    - 2379  # etcd client requests
    - 2380  # etcd peer communication
    - 22    # SSH
    - 8080  # Optional: Kubernetes API insecure port
    - 10250 # Kubelet API
    - 10251 # Scheduler
    - 10252 # Controller Manager
    - 10255 # Read-only Kubelet API
    - 5473  # Calico networking

- name: Reload the firewall
  command: ufw reload



#----------------------------------------------

# ----  Instalación kubernetes  ----
# Añadir la clave GPG de Kubernetes


- name: Descargando GPG key securely para Kubernetes 
  shell: curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.32/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
  become: true

# Repositorio de Kubernetes
- name: Añadiendo Repositorio de Kubernetes
  apt_repository:
    repo: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.30/deb/ /"
    state: present

# Permisos de la API
- name: Permitimos a la API leer sin privilegios
  file:
    path: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
    state: file
    mode: '644'

- name: Agregar repositorio de Kubernetes a sources.list.d
  shell: echo 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.32/deb/ /' | sudo tee /etc/apt/sources.list.d/kubernetes.list

- name: Configuramos el acceso a los comandos de Kubernetes
  file:
    path: /etc/apt/sources.list.d/kubernetes.list
    state: directory
    mode: '644'

# Actualizar Repositorios
- name: Actualizar los Repositorios
  apt:
    update_cache: yes
    cache_valid_time: 3600

# Instalamos
- name: Instalando kubeadm, kubelet, kubectl
  apt:
    name:
      - kubelet
      - kubeadm
      - kubectl
    state: present
    update_cache: yes

- name: Manterner versiones de kubeadm, kubelet, kubectl
  command: apt-mark hold kubelet kubeadm kubectl
  become: true

# Habilitar kubelet y verificar la instalación
- name: Habilitat kubelet
  command: systemctl enable --now kubelet
  become: true

- name: Verificar instalación de Kubernetes (kubectl)
  shell: kubectl version --client

- name: Verificar instalación de Kubernetes (kubeadm)
  shell: kubeadm version

# Desactivar el swap
- name: Desactivando memoria swap para Kubernetes
  command: swapoff -a

- name: Desactivar swap en /etc/fstab
  lineinfile:
    path: /etc/fstab
    regexp: '^/swap.img'
    line: '#/swap.img none swap sw 0 0'
    state: present

- name: Pull kubeadm container images
  command: kubeadm config images pull --kubernetes-version v1.30.10
  become: true

- name: Inicializar el clúster
  shell: | 
    kubeadm init --pod-network-cidr=172.24.0.0/16 --cri-socket=unix:///run/containerd/containerd.sock --upload-certs --control-plane-endpoint=master1
    mkdir -p $HOME/.kube
    cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
    chown $(id -u):$(id -g) $HOME/.kube/config

- name: Exportar variable de entorno KUBECONFIG
  shell: export KUBECONFIG=$HOME/.kube/config

- name: Comprobar que el clúster está funcionando
  shell: kubectl cluster-info
#---------------------------------
- name: Wait for API server to be available
  uri:
    url: https://192.168.1.12:6443/healthz
    validate_certs: no
    status_code: 200
  register: api_server_status
  until: api_server_status.status == 200
  retries: 5
  delay: 10
  ignore_errors: yes
#---------------------------------
# Instalar Calico
#---------------------------------
- name: Descargar y configurar plugin de red Calico
  shell: |
    curl -O https://raw.githubusercontent.com/projectcalico/calico/v3.26.1/manifests/tigera-operator.yaml
    curl -O https://raw.githubusercontent.com/projectcalico/calico/v3.26.1/manifests/custom-resources.yaml
    kubectl create -f tigera-operator.yaml
    sed -ie 's/192.168.0.0/172.24.0.0/g' custom-resources.yaml
    kubectl create -f custom-resources.yaml
    kubectl get pods --all-namespaces -w

- name: Desactivar ejecución de pods en el nodo maestro
  shell: kubectl taint nodes --all node-role.kubernetes.io/control-plane-

- name: Confirmar el funcionamiento del nodo
  shell: kubectl get nodes -o wide


#---------------------------------
# Creando el token con kubeadm
- name: Generate the Join Command
  shell: kubeadm token create --print-join-command > /tmp/join-command
  become: true

- name: Generar hash del token de descubrimiento
  shell: openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2>/dev/null | openssl dgst -sha256 -hex | sed 's/^.* //'
  register: hash_output

# Comprobando que el archivo se haya creado
- name: Wait for /tmp/join-command to be created
  stat:
    path: /tmp/join-command
  register: join_command_stat
  until: join_command_stat.stat.exists
  retries: 5
  delay: 10
  ignore_errors: yes

# Si no se crea el archivo, se falla
- name: Fail if /tmp/join-command is not created after retries
  fail:
    msg: "El archivo /tmp/join-command no se ha creado después de 5 minutos. Verifica el estado del clúster."
  when: not join_command_stat.stat.exists

# Estableciendo permisos para el archivo
- name: Set permissions for the Join Executable
  file:
    path: /tmp/join-command
    state: file
    mode: '0755'
  delegate_to: localhost

# Copiando el archivo a los nodos workers
- name: Copy join command to worker
  copy:
    src: /tmp/join-command
    dest: /tmp/join-command
    remote_src: yes
  delegate_to: worker1
- name: Mostrar comando para unir workers al clúster
  debug:
    msg: |
      kubeadm join <control-plane-host>:<control-plane-port> --token {{ token_output.stdout }} --discovery-token-ca-cert-hash sha256:{{ hash_output.stdout }}
#---------------------------------